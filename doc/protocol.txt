= Beanstalk Protocol =

Protocol
--------

The beanstalk protocol runs over TCP using ASCII encoding. Clients connect,
send commands and data, wait for responses, and close the connection. For each
connection, the server processes commands serially in the order in which they
were received and sends responses in the same order. All integers in the
protocol are formatted in decimal and (unless otherwise indicated)
nonnegative.

The protocol contains two kinds of data: text lines and unstructured chunks of
data. Text lines are used for client commands and server responses. Chunks are
used to transfer job bodies and stats information. Each job body is an opaque
sequence of bytes. The server never inspects or modifies a job body and always
sends it back in its original form. It is up to the clients to agree on a
meaningful interpretation of job bodies.

There is no command to close the connection -- the client may simply close the
TCP connection when it no longer has use for the server. However, beanstalkd
performs very well with a large number of open connections, so it is usually
better for the client to keep its connection open and reuse it as much as
possible. This also avoids the overhead of establishing new TCP connections.

If a client violates the protocol (such as by sending a request that is not
well-formed or a command that does not exist) or if the server has an error,
the server will reply with one of the following error messages:

 - "OUT_OF_MEMORY\r\n" The server cannot allocate enough memory for the job.
   The client should try again later.

 - "INTERNAL_ERROR\r\n" This indicates a bug in the server. It should never
   happen. If it does happen, please report it at
   http://groups.google.com/group/beanstalk-talk.

 - "DRAINING\r\n" This means that the server has been put into "drain mode"
   and is no longer accepting new jobs. The client should try another server
   or disconnect and try again later.

 - "BAD_FORMAT\r\n" The client sent a command line that was not well-formed.
   This can happen if the line does not end with \r\n, if non-numeric
   characters occur where an integer is expected, if the wrong number of
   arguments are present, or if the command line is mal-formed in any other
   way.

 - "UNKNOWN_COMMAND\r\n" The client sent a command that the server does not
   know.

 - "EXPECTED_CRLF\r\n" The job body must be followed by a CR-LF pair, that is,
   "\r\n". These two bytes are not counted in the job size given by the client
   in the put command line.

 - "JOB_TOO_BIG\r\n" The client has requested to put a job with a body larger
   than 2**16 bytes.

These error responses will not be listed in this document for individual
commands in the following sections, but they are implicitly included in the
description of all commands. Clients should be prepared to receive an error
response after any command.

As a last resort, if the server has a serious error that prevents it from
continuing service to the current client, the server will close the
connection.

Job Lifecycle
-------------

A job in beanstalk gets created by a client with the "put" command. During its
life it can be in one of four states: "ready", "reserved", "delayed", or
"buried". After the put command, a job typically starts out ready. It waits in
the ready queue until a worker comes along and runs the "reserve" command. If
this job is next in the queue, it will be reserved for the worker. The worker
will execute the job; when it is finished the worker will send a "delete"
command to delete the job.

Here is a picture of the typical job lifecycle:


   put            reserve               delete
  -----> [READY] ---------> [RESERVED] --------> *poof*



Here is a picture with more possibilities:



   put with delay               release with delay
  ----------------> [DELAYED] <------------.
                        |                   |
                        | (time passes)     |
                        |                   |
   put                  v     reserve       |       delete
  -----------------> [READY] ---------> [RESERVED] --------> *poof*
                       ^  ^                |  |
                       |   \  release      |  |
                       |    `-------------'   |
                       |                      |
                       | kick                 |
                       |                      |
                       |       bury           |
                    [BURIED] <---------------'
                       |
                       |  delete
                        `--------> *poof*



Producer Command
----------------

The "put" command is for any process that wants to insert a job into the queue.
It comprises a command line followed by the job body:

put <pri> <delay> <ttr> <bytes>\r\n
<data>\r\n

It inserts a job into the queue.

 - <pri> is an integer < 2**32. Jobs with smaller priority values will be
   scheduled before jobs with larger priorities. The most urgent priority is 0;
   the least urgent priority is 4294967295.

 - <delay> is an integer number of seconds to wait before putting the job in
   the ready queue. The job will be in the "delayed" state during this time.

 - <ttr> -- time to run -- is an integer number of seconds to allow a worker
   to run this job. This time is counted from the moment a worker reserves
   this job. If the worker does not delete, release, or bury the job within
   <ttr> seconds, the job will time out and the server will release the job.

 - <bytes> is an integer (currently must be < 2**16) indicating the size of
   the job body, not including the trailing "\r\n".

 - <data> is the job body -- a sequence of bytes of length <bytes> from the
   previous line.

After sending the command line and body, the client waits for a reply, which
may be:

 - "INSERTED <id>\r\n" to indicate success.

   - <id> is the integer id of the new job

 - "BURIED <id>\r\n" if the priority queue data structure is full.

   - <id> is the integer id of the new job

Worker Commands
---------------

A process that wants to consume jobs from the queue uses "reserve", "delete",
"release", and "bury". The first worker command, "reserve", looks like this:

reserve\r\n

This will return a newly-reserved job. If no job is available to be reserved,
beanstalkd will wait to send a response until one becomes available. Once a job
is reserved for the client, the client has limited time to run the job before
the job times out, when the server will put the job back into the ready queue.
The time available can be found by asking the server for the job's stats.

There is only one possible response in the form of a text line followed by the
job body:

RESERVED <id> <pri> <bytes>\r\n
<data>\r\n

 - <id> is the job id -- an integer unique to this job in this instance of
   beanstalkd.

 - <pri> is the priority value set by the put, release, or bury commands.

 - <bytes> is an integer indicating the size of the job body, not including
   the trailing "\r\n".

 - <data> is the job body -- a sequence of bytes of length <bytes> from the
   previous line. This is a verbatim copy of the bytes that were originally
   sent to the server in the put command for this job.

The delete command removes a job from the server entirely. It is normally used
by the client when the job has successfully run to completion. A client can
only delete jobs that it has reserved or jobs that are buried. The delete
command looks like this:

delete <id>\r\n

 - <id> is the job id to delete.

The client then waits for one line of response, which may be:

 - "DELETED\r\n" to indicate success.

 - "NOT_FOUND\r\n" if the job does not exist or is not either reserved by the
   client or buried. This could happen if the job timed out before the client
   sent the delete command.

The release command puts a reserved job back into the ready queue (and marks
its state as "ready") to be run by any client. It is normally used when the job
fails because of a transitory error. It looks like this:

release <id> <pri> <delay>\r\n

 - <id> is the job id to release.

 - <pri> is a new priority to assign to the job.

 - <delay> is an integer number of seconds to wait before putting the job in
   the ready queue. The job will be in the "delayed" state during this time.

The client expects one line of response, which may be:

 - "RELEASED\r\n" to indicate success.

 - "BURIED\r\n" if the priority queue data structure is full.

 - "NOT_FOUND\r\n" if the job does not exist or is not reserved by the client.

The bury command puts a job into the "buried" state. Buried jobs are put into a
FIFO linked list and will not be touched by the server again until a client
kicks them with the "kick" command.

The bury command looks like this:

bury <id> <pri>\r\n

 - <id> is the job id to release.

 - <pri> is a new priority to assign to the job.

There are two possible responses:

 - "BURIED\r\n" to indicate success.

 - "NOT_FOUND\r\n" if the job does not exist or is not reserved by the client.

Other Commands
--------------

The peek command lets the client inspect a job in the system. Its format:

peek[ <id>]\r\n

If <id> is not given, peek will show the next job in the list of buried jobs,
if any.

 - <id> is the job id to show, if given.

There are two possible responses, either a single line:

 - "NOT_FOUND\r\n" if the requested job doesn't exist or there are no buried
   jobs.

Or a line followed by a chunk of data, if the command was successful:

FOUND <id> <pri> <bytes>\r\n
<data>\r\n

 - <id> is the job id.

 - <pri> is the job's priority.

 - <bytes> is an integer indicating the size of the job body, not including
   the trailing "\r\n".

 - <data> is the job body -- a sequence of bytes of length <bytes> from the
   previous line.

The kick command moves jobs into the ready queue. If there are any buried jobs,
it will only kick buried jobs. Otherwise it will kick delayed jobs. It looks
like:

kick <bound>\r\n

 - <bound> is an integer upper bound on the number of jobs to kick. The server
   will kick no more than <bound> jobs.

The response is of the form

KICKED <count>\r\n

 - <count> is an integer indicating the number of jobs actually kicked.

The stats command gives statistical information. If a job id is given, the
response will contain information about that job if it exists. Otherwise stats
will return information about the system as a whole. Its form is:

stats[ <id>]\r\n

If a job id is given, the response may be:

  - "NOT_FOUND\r\n" if the job does not exist.

Otherwise the server will respond:

OK <bytes>\r\n
<data>\r\n

 - <bytes> is the size of the following data section in bytes.

 - <data> is a sequence of bytes of length <bytes> from the previous line. It
   is a YAML file with statistical information represented a dictionary.

Stats format

The stats data is a YAML file representing a single dictionary of strings to
scalars.

 - The stats dict for a job contains these keys:

   - "id" is the job id

   - "state" is "ready" or "delayed" or "reserved" or "buried"

   - "age" is the time in seconds since the put command that created this job.

   - "time-left" is the number of seconds left until the server puts this job
     into the ready queue. This number is only meaningful if the job is
     reserved or delayed. If the job is reserved and this amount of time
     elapses before its state changes, it is considered to have timed out.

   - "timeouts" is the number of times this job has timed out during a
     reservation.

   - "releases" is the number of times a client has released this job from a
     reservation.

   - "buries" is the number of times this job has been buried.

   - "kicks" is the number of times this job has been kicked.

 - The stats dict for the system contains these keys:

   - "current-jobs-urgent" is the number of ready jobs with priority < 1024.

   - "current-jobs-ready" is the number of jobs in the ready queue.

   - "current-jobs-reserved" is the number of jobs reserved by all clients.

   - "current-jobs-delayed" is the number of delayed jobs.

   - "current-jobs-buried" is the number of buried jobs.

   - "limit-max-jobs-ready" is the total capacity of the ready queue. Once this
     many jobs are ready, any additional jobs will be buried.

   - "cmd-put" is the cumulative number of put commands.

   - "cmd-peek" is the cumulative number of peek commands.

   - "cmd-reserve" is the cumulative number of reserve commands.

   - "cmd-delete" is the cumulative number of delete commands.

   - "cmd-release" is the cumulative number of release commands.

   - "cmd-bury" is the cumulative number of bury commands.

   - "cmd-kick" is the cumulative number of kick commands.

   - "cmd-stats" is the cumulative number of stats commands.

   - "job-timeouts" is the cumulative count of times a job has timed out.

   - "total-jobs" is the cumulative count of jobs created.

   - "current-connections" is the number of currently open connections.

   - "current-producers" is the number of open connections that have each
     issued at least one put command.

   - "current-workers" is the number of open connections that have each issued
     at least one reserve command.

   - "current-waiting" is the number of open connections that have issued a
     reserve command but not yet received a response.

   - "total-connections" is the cumulative count of connections.

   - "pid" is the process id of the server.

   - "version" is the version string of the server.

   - "rusage-utime" is the accumulated user CPU time of this process in seconds
     and microseconds.

   - "rusage-stime" is the accumulated system CPU time of this process in
     seconds and microseconds.

   - "uptime" is the number of seconds since this server started running.


